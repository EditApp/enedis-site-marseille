/*!
 * fastshell
 * Fiercely quick and opinionated front-ends
 * https://HosseinKarami.github.io/fastshell
 * @author Hossein Karami
 * @version 1.0.5
 * Copyright 2018. MIT licensed.
 */
!function(e,t,s,n){"use strict";e(function(){function n(e){var t=e.clientX,s="-"+1*t+"px";r.style.marginLeft=s}const a=t.scrollY;a>0?e("#header").addClass("sticky"):e("#header").removeClass("sticky"),e(t).scroll(function(){e("#header").addClass("sticky"),e(this).scrollTop()>=700?e("#sousmenu").addClass("sticky"):e("#sousmenu").hasClass("sticky")&&e("#sousmenu").removeClass("sticky")}),setTimeout(function(){e(".home-main").addClass("animated")},3e3),e('a[href*="#"]').not('[href="#"]').not('[href="#0"]').click(function(t){if(location.pathname.replace(/^\//,"")===this.pathname.replace(/^\//,"")&&location.hostname===this.hostname){var s=e(this.hash);s=s.length?s:e("[name="+this.hash.slice(1)+"]"),s.length&&(t.preventDefault(),e("html, body").animate({scrollTop:s.offset().top-65},1e3))}});var o=e(".mobile-menu");e(".burger").on("click",function(){o.toggleClass("open")});var i=e("#cartiers .col-3"),c=i.length,l=200*c,r=s.querySelector("#cartiers .flex-direction-block");r.style.width=l+"px",c>1?(r.addEventListener("mousemove",function(e){n(e)}),r.addEventListener("touchmove",function(e){n(e)})):(i.addClass("unique"),e("#cartiers .flex-direction-block").addClass("auto-width"))})}(jQuery,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMuanMiXSwibmFtZXMiOlsiJCIsIndpbmRvdyIsImRvY3VtZW50IiwidW5kZWZpbmVkIiwibXlGdW5jdGlvbiIsImUiLCJ4IiwiY2xpZW50WCIsImR5bmFtaWNTY3JvbGxSaWdodCIsInNjcm9sbENvbnRhaW5lciIsInN0eWxlIiwibWFyZ2luTGVmdCIsIndpbmRvd0lzU2Nyb2xsZWQiLCJzY3JvbGxZIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsInNjcm9sbCIsInRoaXMiLCJzY3JvbGxUb3AiLCJoYXNDbGFzcyIsInNldFRpbWVvdXQiLCJub3QiLCJjbGljayIsImV2ZW50IiwibG9jYXRpb24iLCJwYXRobmFtZSIsInJlcGxhY2UiLCJob3N0bmFtZSIsInRhcmdldCIsImhhc2giLCJsZW5ndGgiLCJzbGljZSIsInByZXZlbnREZWZhdWx0IiwiYW5pbWF0ZSIsIm9mZnNldCIsInRvcCIsIm1vYmlsZU1lbnUiLCJvbiIsInRvZ2dsZUNsYXNzIiwiY29udGFpbmVyQ29scyIsImNvbnRhaW5lckxlbmdodCIsInRvdGFsTGVuZ2h0IiwicXVlcnlTZWxlY3RvciIsIndpZHRoIiwiYWRkRXZlbnRMaXN0ZW5lciIsImpRdWVyeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Q0FBQSxTQUFBQSxFQUFBQyxFQUFBQyxFQUFBQyxHQUVBLFlBRUFILEdBQUEsV0FxRUEsUUFBQUksR0FBQUMsR0FDQSxHQUFBQyxHQUFBRCxFQUFBRSxRQUdBQyxFQUFBLElBQUEsRUFBQUYsRUFBQSxJQUNBRyxHQUFBQyxNQUFBQyxXQUFBSCxFQXpFQSxLQUFBSSxHQUFBWCxFQUFBWSxPQUNBRCxHQUFBLEVBQ0FaLEVBQUEsV0FBQWMsU0FBQSxVQUVBZCxFQUFBLFdBQUFlLFlBQUEsVUFFQWYsRUFBQUMsR0FBQWUsT0FBQSxXQUNBaEIsRUFBQSxXQUFBYyxTQUFBLFVBQ0FkLEVBQUFpQixNQUFBQyxhQUFBLElBQ0FsQixFQUFBLGFBQUFjLFNBQUEsVUFFQWQsRUFBQSxhQUFBbUIsU0FBQSxXQUNBbkIsRUFBQSxhQUFBZSxZQUFBLFlBTUFLLFdBQUEsV0FDQXBCLEVBQUEsY0FBQWMsU0FBQSxhQUVBLEtBT0FkLEVBQUEsZ0JBQUFxQixJQUFBLGNBQUFBLElBQUEsZUFBQUMsTUFBQSxTQUFBQyxHQUdBLEdBQUFDLFNBQUFDLFNBQUFDLFFBQUEsTUFBQSxNQUFBVCxLQUFBUSxTQUFBQyxRQUFBLE1BQUEsS0FBQUYsU0FBQUcsV0FBQVYsS0FBQVUsU0FBQSxDQUNBLEdBQUFDLEdBQUE1QixFQUFBaUIsS0FBQVksS0FDQUQsR0FBQUEsRUFBQUUsT0FBQUYsRUFBQTVCLEVBQUEsU0FBQWlCLEtBQUFZLEtBQUFFLE1BQUEsR0FBQSxLQUNBSCxFQUFBRSxTQUNBUCxFQUFBUyxpQkFDQWhDLEVBQUEsY0FBQWlDLFNBQ0FmLFVBQUFVLEVBQUFNLFNBQUFDLElBQUEsSUFDQSxRQWdCQSxJQUFBQyxHQUFBcEMsRUFBQSxlQUNBQSxHQUFBLFdBQUFxQyxHQUFBLFFBQUEsV0FDQUQsRUFBQUUsWUFBQSxTQUtBLElBQUFDLEdBQUF2QyxFQUFBLG9CQUNBd0MsRUFBQUQsRUFBQVQsT0FDQVcsRUFBQSxJQUFBRCxFQUVBL0IsRUFBQVAsRUFBQXdDLGNBQUEsa0NBQ0FqQyxHQUFBQyxNQUFBaUMsTUFBQUYsRUFBQSxLQVVBRCxFQUFBLEdBRUEvQixFQUFBbUMsaUJBQUEsWUFBQSxTQUFBckIsR0FDQW5CLEVBQUFtQixLQUVBZCxFQUFBbUMsaUJBQUEsWUFBQSxTQUFBckIsR0FDQW5CLEVBQUFtQixPQUdBZ0IsRUFBQXpCLFNBQUEsVUFDQWQsRUFBQSxtQ0FBQWMsU0FBQSxrQkFTQStCLE9BQUE1QyxPQUFBQyIsImZpbGUiOiJzY3JpcHRzLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XHJcblxyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgJChmdW5jdGlvbiAoKSB7XHJcbiAgICBjb25zdCB3aW5kb3dJc1Njcm9sbGVkID0gd2luZG93LnNjcm9sbFk7XHJcbiAgICBpZih3aW5kb3dJc1Njcm9sbGVkID4gMCkge1xyXG4gICAgICAkKCcjaGVhZGVyJykuYWRkQ2xhc3MoJ3N0aWNreScpO1xyXG4gICAgfWVsc2Uge1xyXG4gICAgICAkKCcjaGVhZGVyJykucmVtb3ZlQ2xhc3MoJ3N0aWNreScpO1xyXG4gICAgfVxyXG4gICAgJCh3aW5kb3cpLnNjcm9sbChmdW5jdGlvbigpe1xyXG4gICAgICAkKCcjaGVhZGVyJykuYWRkQ2xhc3MoJ3N0aWNreScpO1xyXG4gICAgICAgIGlmKCQodGhpcykuc2Nyb2xsVG9wKCkgPj0gNzAwKSB7XHJcbiAgICAgICAgICAkKCcjc291c21lbnUnKS5hZGRDbGFzcygnc3RpY2t5Jyk7XHJcbiAgICAgICAgfWVsc2Uge1xyXG4gICAgICAgICAgaWYgKCQoJyNzb3VzbWVudScpLmhhc0NsYXNzKCdzdGlja3knKSkge1xyXG4gICAgICAgICAgICAkKCcjc291c21lbnUnKS5yZW1vdmVDbGFzcygnc3RpY2t5Jyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBcclxuXHJcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7IFxyXG4gICAgICAkKCcuaG9tZS1tYWluJykuYWRkQ2xhc3MoJ2FuaW1hdGVkJyk7XHJcblxyXG4gICAgfSwgMzAwMCk7XHJcblxyXG4gICAgLy8gRmFzdFNoZWxsXHJcbiAgICAvLyAkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uKCl7XHJcbiAgICAvLyAgXHJcbiAgICAvLyB9KTtcclxuICAgIC8vIHNjcm9sbFxyXG4gICAgJCgnYVtocmVmKj1cIiNcIl0nKS5ub3QoJ1tocmVmPVwiI1wiXScpLm5vdCgnW2hyZWY9XCIjMFwiXScpLmNsaWNrKGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgIFxyXG4gICAgICAvLyQodGhpcykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXlxcLy8sICcnKSA9PT0gdGhpcy5wYXRobmFtZS5yZXBsYWNlKC9eXFwvLywgJycpICYmIGxvY2F0aW9uLmhvc3RuYW1lID09PSB0aGlzLmhvc3RuYW1lICkge1xyXG4gICAgICAgIHZhciB0YXJnZXQgPSAkKHRoaXMuaGFzaCk7XHJcbiAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0Lmxlbmd0aCA/IHRhcmdldCA6ICQoJ1tuYW1lPScgKyB0aGlzLmhhc2guc2xpY2UoMSkgKyAnXScpO1xyXG4gICAgICAgIGlmICh0YXJnZXQubGVuZ3RoKSB7XHJcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgJCgnaHRtbCwgYm9keScpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICBzY3JvbGxUb3A6IHRhcmdldC5vZmZzZXQoKS50b3AgLSA2NVxyXG4gICAgICAgICAgfSwgMTAwMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyAkKCcudHJhdmF1eC1kZXNjLWJsb2NrLS1pdGVtLmZpcnN0JykuZWFjaChmdW5jdGlvbigpe1xyXG4gICAgLy8gICAkKHRoaXMpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCl7XHJcbiAgICAvLyAgICAgJCh0aGlzKS5wYXJlbnQoKS5hZGRDbGFzcygnb3BlbicpO1xyXG4gICAgLy8gICB9KTtcclxuICAgIC8vIH0pO1xyXG4gICAgLy8gJCgnLnRyYXZhdXgtZGVzYy1ibG9jay0taXRlbS5zZWNvbmQnKS5lYWNoKGZ1bmN0aW9uKCl7XHJcbiAgICAvLyAgICQodGhpcykub24oJ2NsaWNrJywgZnVuY3Rpb24oKXtcclxuICAgIC8vICAgICAkKHRoaXMpLnBhcmVudCgpLnJlbW92ZUNsYXNzKCdvcGVuJyk7XHJcbiAgICAvLyAgIH0pO1xyXG4gICAgLy8gfSk7XHJcbiAgICAvL21lbnUgbW9iaWxlXHJcbiAgICB2YXIgbW9iaWxlTWVudSA9ICQoJy5tb2JpbGUtbWVudScpO1xyXG4gICAgJCgnLmJ1cmdlcicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCl7XHJcbiAgICAgIG1vYmlsZU1lbnUudG9nZ2xlQ2xhc3MoJ29wZW4nKTtcclxuICAgICAgXHJcbiAgICB9KTtcclxuICAgIFxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1NDUk9MTCBRVUFSVElFUlNcclxuICAgIHZhciBjb250YWluZXJDb2xzID0gJCgnI2NhcnRpZXJzIC5jb2wtMycpO1xyXG4gICAgdmFyIGNvbnRhaW5lckxlbmdodCA9IGNvbnRhaW5lckNvbHMubGVuZ3RoO1xyXG4gICAgdmFyIHRvdGFsTGVuZ2h0ID0gY29udGFpbmVyTGVuZ2h0ICogMjAwO1xyXG4gIFxyXG4gICAgdmFyIHNjcm9sbENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjYXJ0aWVycyAuZmxleC1kaXJlY3Rpb24tYmxvY2snKTtcclxuICAgIHNjcm9sbENvbnRhaW5lci5zdHlsZS53aWR0aCA9IHRvdGFsTGVuZ2h0ICsgJ3B4JzsgXHJcblxyXG4gICAgZnVuY3Rpb24gbXlGdW5jdGlvbihlKSB7XHJcbiAgICAgICAgdmFyIHggPSBlLmNsaWVudFg7XHJcbiAgICAgICAgLy92YXIgY29vciA9IHggO1xyXG5cclxuICAgICAgICB2YXIgZHluYW1pY1Njcm9sbFJpZ2h0ID0gJy0nICsgeCAqIDEgKyAncHgnO1xyXG4gICAgICAgIHNjcm9sbENvbnRhaW5lci5zdHlsZS5tYXJnaW5MZWZ0ID0gZHluYW1pY1Njcm9sbFJpZ2h0O1xyXG4gICAgXHJcbiAgICB9XHJcbiAgICBpZihjb250YWluZXJMZW5naHQgPiAxKXtcclxuICAgICBcclxuICAgICAgc2Nyb2xsQ29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgICBteUZ1bmN0aW9uKGV2ZW50KTtcclxuICAgICAgfSk7XHJcbiAgICAgIHNjcm9sbENvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgICAgbXlGdW5jdGlvbihldmVudCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfWVsc2Uge1xyXG4gICAgICBjb250YWluZXJDb2xzLmFkZENsYXNzKCd1bmlxdWUnKTtcclxuICAgICAgJCgnI2NhcnRpZXJzIC5mbGV4LWRpcmVjdGlvbi1ibG9jaycpLmFkZENsYXNzKCdhdXRvLXdpZHRoJyk7XHJcbiAgICB9XHJcbiAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLyBFTkQgU0NST0xMIFFVQVJUSUVSUyAgIFxyXG4gICAgXHJcblxyXG5cclxuXHJcbiAgfSk7XHJcblxyXG59KShqUXVlcnksIHdpbmRvdywgZG9jdW1lbnQpO1xyXG4iXX0=
